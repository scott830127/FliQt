// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"FliQt/internals/app/api"
	"FliQt/internals/app/config"
	"FliQt/internals/app/repository"
	"FliQt/internals/app/router"
	"FliQt/internals/app/service"
	"FliQt/pkg/di"
	"FliQt/pkg/redisx"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func injector(cfg *config.Config) (*Application, func(), error) {
	client, err := di.NewRedisClient(cfg)
	if err != nil {
		return nil, nil, err
	}
	locker, cleanup, err := di.NewRedisLock(cfg)
	if err != nil {
		return nil, nil, err
	}
	bundle := &redisx.Bundle{
		Client: client,
		Locker: locker,
	}
	db, cleanup2, err := di.NewMainDB(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	iLeaveRepository := repository.NewLeaveRepository(bundle, db)
	repo := &repository.Repo{
		LeaveRepository: iLeaveRepository,
	}
	iLeaveService := service.NewLeaveService(repo)
	srv := &service.Srv{
		LeaveService: iLeaveService,
	}
	iLeaveAPI := api.NewLeaveAPI(srv, bundle)
	engine := router.New(iLeaveAPI)
	application := &Application{
		Engine: engine,
	}
	return application, func() {
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

type Application struct {
	Engine *gin.Engine
}

func Start(cfg *config.Config) (*Application, func(), error) {
	return injector(cfg)
}
